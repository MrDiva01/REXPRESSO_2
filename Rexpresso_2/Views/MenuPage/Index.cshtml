@model List<Product>

<h2 class="text-center mb-5">MENU</h2>

<div class="menu-grid">
    @foreach (var product in Model)
    {
        <div class="menu-item">
            <img class="center" src="/imgs/@product.ImageFileName" alt="@product.Name" />
            <div class="menu-item-details">
                <div class="menu-item-name">@product.Name</div>
                <div class="menu-item-description">@product.Description</div>
                <div class="menu-item-category">Category: @product.Category</div>
                <div class="menu-item-price">Price: @product.Price</div>
                <div class="menu-item-quantity">Quantity: @product.Quantity</div>
                <div class="menu-item-created">Created At: @product.CreatedAt.ToString("MM/dd/yyyy")</div>
            </div>
            <div class="quantity-and-cart">
                <input type="number" class="quantity-input" value="1" min="1" id="quantity_@product.Id">
                <a class="add-to-cart-button" href="#" onclick="addToCart('@product.Name', @product.Price, document.getElementById('quantity_@product.Id').value); return false;">Add to Cart</a>
            </div>
        </div>
    }
</div>

<script>
    // Function to add items to the cart
    function addToCart(itemName, itemPrice, quantity) {
        // Convert quantity to number
        quantity = parseInt(quantity);

        // Calculate total price for the item
        var totalPrice = itemPrice * quantity;

        // Retrieve existing cart items from local storage or initialize an empty array
        var cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];

        // Add new item to cart
        cartItems.push({ name: itemName, price: itemPrice, quantity: quantity, total: totalPrice });

        // Store updated cart items in local storage
        localStorage.setItem('cartItems', JSON.stringify(cartItems));

        // Alert user that item has been added to cart (can be replaced with a more visually appealing notification)
        alert(itemName + " added to cart!");
    }

    // Function to navigate to the cart page
    function goToCart() {
        window.location.href = "/cart"; // Redirect to cart page (assuming a route exists)
    }
</script>

<style>
    .menu-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
    }

    .menu-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        background-color: #f0f0f0;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
        padding: 20px;
    }

        .menu-item:hover {
            transform: translateY(-5px);
        }

        .menu-item img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin-bottom: 20px;
        }

    .menu-item-details {
        text-align: center;
    }

    .menu-item-name {
        font-size: 20px;
        font-weight: bold;
        color: black;
        margin-bottom: 5px;
    }

    .menu-item-description,
    .menu-item-category,
    .menu-item-price,
    .menu-item-quantity,
    .menu-item-created {
        color: black;
        margin-bottom: 10px;
    }

    .menu-item-price {
        color: #ffd700;
        font-weight: bold;
    }

    .quantity-and-cart {
        display: flex;
        align-items: center;
    }

    .quantity-input {
        width: 50px;
        margin-right: 10px;
        padding: 5px;
    }

    .add-to-cart-button {
        background-color: #3c2a04;
        color: #ffffff; /* White text for button */
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .add-to-cart-button:hover {
            background-color: #e6bb00; /* Darker shade of gold on hover */
        }
</style>
